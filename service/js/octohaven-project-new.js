// Generated by CoffeeScript 1.9.0
(function() {
  var changeState, checkvalue, generate, generatelink, projectidInput, randomlink, theForm, theFormElem;

  theFormElem = document.getElementById("octohaven-new-project-form");

  theForm = new this.Form(theFormElem, (function(_this) {
    return function(data) {
      var k, v;
      theForm.destroyMessage();
      theForm.startLoading();
      for (k in data) {
        v = data[k];
        data[k] = _this.util.quote(v);
      }
      return _this.loader.sendrequest("post", "/api/project/create", {}, JSON.stringify(data), function(success, response) {
        var isnew, redirect, _ref;
        theForm.stopLoading();
        if (success === 200) {
          response = JSON.parse(response);
          _ref = [response.data.redirect, response.data.isnew], redirect = _ref[0], isnew = _ref[1];
          if (redirect) {
            return window.location.href = redirect;
          } else {
            return theForm.showSuccessMessage(response.message);
          }
        } else {
          return theForm.showErrorMessage("Something unexpected happened");
        }
      }, function(error, response) {
        theForm.stopLoading();
        try {
          response = JSON.parse(response);
          return theForm.showErrorMessage(response.message);
        } catch (_error) {
          return theForm.showErrorMessage("Something unexpected happened");
        }
      });
    };
  })(this));

  projectidInput = theForm.getControlForNameAttr("projectname");

  if (!projectidInput) {
    throw new Error("Project name field is not found");
  }

  generate = function() {
    var adjs, nouns, rnd;
    adjs = ["autumn", "hidden", "bitter", "misty", "silent", "empty", "dry", "dark", "summer", "icy", "delicate", "quiet", "white", "cool", "spring", "winter", "patient", "twilight", "dawn", "crimson", "wispy", "weathered", "blue", "billowing", "broken", "cold", "damp", "falling", "frosty", "green", "long", "late", "lingering", "bold", "little", "morning", "muddy", "old", "red", "rough", "still", "small", "sparkling", "throbbing", "shy", "wandering", "withered", "wild", "black", "young", "holy", "solitary", "fragrant", "aged", "snowy", "proud", "floral", "restless", "divine", "polished", "ancient", "purple", "lively", "nameless"];
    nouns = ["waterfall", "river", "breeze", "moon", "rain", "wind", "sea", "morning", "snow", "lake", "sunset", "pine", "shadow", "leaf", "dawn", "glitter", "forest", "hill", "cloud", "meadow", "sun", "glade", "bird", "brook", "butterfly", "bush", "dew", "dust", "field", "fire", "flower", "firefly", "feather", "grass", "haze", "mountain", "night", "pond", "darkness", "snowflake", "silence", "sound", "sky", "shape", "surf", "thunder", "violet", "water", "wildflower", "wave", "water", "resonance", "sun", "wood", "dream", "cherry", "tree", "fog", "frost", "voice", "paper", "frog", "smoke", "star"];
    rnd = Math.floor(Math.random() * Math.pow(2, 12));
    return adjs[rnd >> 6 % 64] + "-" + nouns[rnd % 64];
  };

  randomlink = document.getElementById("form-random-projectname");

  randomlink.innerHTML = generate();

  generatelink = document.getElementById("form-generate-projectname");

  this.util.addEventListener(randomlink, "click", (function(_this) {
    return function(e) {
      var event;
      projectidInput.value = randomlink.innerHTML;
      if (document.createEvent) {
        event = document.createEvent("HTMLEvents");
        event.initEvent("keyup", true, true);
        projectidInput.dispatchEvent(event);
      } else {
        event = document.createEventObject();
        event.eventType = "keyup";
        projectidInput.fireEvent("on" + event.eventType, event);
      }
      e.preventDefault();
      return e.stopPropagation();
    };
  })(this));

  this.util.addEventListener(generatelink, "click", (function(_this) {
    return function(e) {
      randomlink.innerHTML = generate();
      e.preventDefault();
      return e.stopPropagation();
    };
  })(this));

  changeState = function(input, status) {
    var error, success, _ref;
    _ref = ["control-errored", "control-successful"], error = _ref[0], success = _ref[1];
    this.util.removeClass(input, error, success);
    if (status === "success") {
      return this.util.addClass(input, success);
    } else if (status === "error") {
      return this.util.addClass(input, error);
    }
  };

  checkvalue = function(value, ok, ko) {
    var data;
    data = {
      projectname: this.util.quote(value)
    };
    return this.loader.sendrequest("post", "/api/project/validate", {}, JSON.stringify(data), (function(_this) {
      return function(status, res) {
        if (status === 200) {
          return typeof ok === "function" ? ok() : void 0;
        } else {
          return typeof ko === "function" ? ko() : void 0;
        }
      };
    })(this), (function(_this) {
      return function(status, res) {
        return typeof ko === "function" ? ko() : void 0;
      };
    })(this));
  };

  changeState(projectidInput);

  this.util.addEventListener(projectidInput, "keyup", (function(_this) {
    return function(e) {
      return checkvalue(e.target.value, (function() {
        return changeState(e.target, "success");
      }), (function() {
        return changeState(e.target, "error");
      }));
    };
  })(this));

  this.util.addEventListener(projectidInput, "onchange", (function(_this) {
    return function(e) {
      return checkvalue(e.target.value, (function() {
        return changeState(e.target, "success");
      }), (function() {
        return changeState(e.target, "error");
      }));
    };
  })(this));

  this.util.addEventListener(projectidInput, "onpaste", (function(_this) {
    return function(e) {
      return checkvalue(e.target.value, (function() {
        return changeState(e.target, "success");
      }), (function() {
        return changeState(e.target, "error");
      }));
    };
  })(this));

}).call(this);
