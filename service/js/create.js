// Generated by CoffeeScript 1.9.0
(function() {
  var breadcrumbs, breadcrumbsElem, filelist, files, filesElem, jobCanvas, jobSettingElem, map;

  jobCanvas = document.getElementById("octohaven-job-settings");

  if (!jobCanvas) {
    throw new Error("Job settings canvas is undefined");
  }

  filelist = document.getElementById("octohaven-filelist");

  if (!filelist) {
    throw new Error("Filelist canvas is undefined");
  }

  jobSettingElem = function(name, desc, value, canChange, onValueChanged) {
    var block, body, changer, header, span, trigger;
    if (canChange == null) {
      canChange = true;
    }
    span = {
      type: "span",
      cls: "text-mute tooltipped tooltipped-n",
      title: "" + name
    };
    span = this.mapper.parseMapForParent(span);
    span.setAttribute("aria-label", "" + desc);
    header = {
      type: "div",
      cls: "one-fifth column",
      children: span
    };
    body = {
      type: "div",
      cls: "three-fifths column text-mono",
      title: "" + value
    };
    body = this.mapper.parseMapForParent(body);
    body.setAttribute("data-attr", "fast-editor-texter");
    trigger = this.mapper.parseMapForParent({
      type: "a",
      href: "#",
      title: "Change"
    });
    trigger.setAttribute("data-attr", "fast-editor-trigger");
    changer = canChange ? {
      type: "div",
      cls: "one-fifth column",
      children: trigger
    } : null;
    changer = this.mapper.parseMapForParent(changer);
    block = {
      type: "div",
      cls: "segment",
      children: {
        type: "div",
        cls: "columns",
        children: [header, body, changer]
      }
    };
    block = this.mapper.parseMapForParent(block);
    block.setAttribute("data-attr", "fast-editor");
    if (canChange) {
      new this.FastEditor(block, function(status, value) {
        return typeof onValueChanged === "function" ? onValueChanged(status, value) : void 0;
      });
    }
    return block;
  };

  this.jobSettings = {
    name: this.namer.generate(),
    mainClass: "com.test.Main",
    driverMemory: "8g",
    executorMemory: "8g",
    options: "#"
  };

  map = {
    type: "div",
    cls: "segments",
    children: [
      jobSettingElem("Job name", "Friendly job name", jobSettings.name, true, function(ok, value) {
        if (ok) {
          return jobSettings.name = value;
        }
      }), jobSettingElem("Main class", "Main class as entrypoint for the job.", jobSettings.mainClass, true, function(ok, value) {
        if (ok) {
          return jobSettings.mainClass = value;
        }
      }), jobSettingElem("Driver memory", "Memory for operations in a driver programme", jobSettings.driverMemory, true, function(ok, value) {
        if (ok) {
          return jobSettings.driverMemory = value;
        }
      }), jobSettingElem("Executor memory", "Amount of memory for Spark executors", jobSettings.executorMemory, true, function(ok, value) {
        if (ok) {
          return jobSettings.executorMemory = value;
        }
      }), jobSettingElem("Options", "Additional settings, e.g. JVM, networking, shuffle...", jobSettings.options, true, function(ok, value) {
        if (ok) {
          return jobSettings.options = value;
        }
      })
    ]
  };

  this.mapper.parseMapForParent(map, jobCanvas);

  filelist = new this.Filelist;

  breadcrumbsElem = document.getElementById("octohaven-filelist-breadcrumbs");

  filesElem = document.getElementById("octohaven-filelist-files");

  if (!(breadcrumbsElem && filesElem)) {
    throw new Error("Cannot build file list");
  }

  breadcrumbs = function(dir) {
    return filelist.breadcrumbs(dir, function() {
      return breadcrumbsElem.innerHTML = "";
    }, (function(_this) {
      return function(json) {
        var arr, elem, i, ls, obj, _i, _len, _ref;
        if (!json) {
          return false;
        }
        _ref = [[], json["content"]["breadcrumbs"]], arr = _ref[0], ls = _ref[1];
        for (i = _i = 0, _len = ls.length; _i < _len; i = ++_i) {
          obj = ls[i];
          if (i < ls.length - 1) {
            elem = {
              type: "a",
              cls: "section",
              title: "" + obj["name"],
              onclick: function(e) {
                breadcrumbs(this.path);
                return files(this.path);
              }
            };
            elem = _this.mapper.parseMapForParent(elem);
            elem.path = obj["path"];
            arr.push(elem);
            arr.push({
              type: "div",
              cls: "separator",
              title: "/"
            });
            elem = null;
          } else {
            arr.push({
              type: "div",
              cls: "active section",
              title: "" + obj["name"]
            });
          }
        }
        return _this.mapper.parseMapForParent(arr, breadcrumbsElem);
      };
    })(this));
  };

  files = function(dir) {
    return filelist.files(dir, function() {
      return filesElem.innerHTML = "";
    }, (function(_this) {
      return function(json) {
        var arr, elem, ls, obj, _i, _len, _ref;
        if (!json) {
          return false;
        }
        _ref = [[], json["content"]["list"]], arr = _ref[0], ls = _ref[1];
        for (_i = 0, _len = ls.length; _i < _len; _i++) {
          obj = ls[_i];
          console.log(obj);
          if (obj["tp"] === "DIR") {
            elem = {
              type: "a",
              cls: "menu-item",
              href: "#",
              title: "[=] " + obj["name"],
              onclick: function(e) {
                breadcrumbs(this.path);
                return files(this.path);
              }
            };
            elem = _this.mapper.parseMapForParent(elem);
            elem.path = obj["path"];
            arr.push(elem);
          } else {
            arr.push({
              type: "div",
              cls: "menu-item",
              title: "" + obj["name"]
            });
          }
        }
        return _this.mapper.parseMapForParent(arr, filesElem);
      };
    })(this));
  };

  breadcrumbs("");

  files("");

}).call(this);
