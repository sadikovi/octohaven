// Generated by CoffeeScript 1.9.0
(function() {
  var Filelist, Status, loader;

  loader = this.loader;

  Status = (function() {
    Status.STATUS_PENDING = "Pending...";

    Status.STATUS_READY = "Server is ready";

    Status.STATUS_BUSY = "Server is busy";

    Status.STATUS_UNREACHABLE = "Server is unreachable";

    function Status() {}

    Status.prototype.requestStatus = function(before, after) {
      if (typeof before === "function") {
        before();
      }
      return loader.sendrequest("get", "/api/v1/sparkstatus", {}, null, (function(_this) {
        return function(code, response) {
          var json, masterAddress, status, uiAddress;
          if (code === 200) {
            json = JSON.parse(response);
            status = json["content"]["sparkstatus"];
            uiAddress = json["content"]["spark-ui-address"];
            masterAddress = json["content"]["spark-master-address"];
            return typeof after === "function" ? after(status, uiAddress, masterAddress) : void 0;
          } else {
            console.log("[ERROR] " + response);
            return typeof after === "function" ? after(false, false, false) : void 0;
          }
        };
      })(this), (function(_this) {
        return function(error, response) {
          console.log("[ERROR] " + response);
          return typeof after === "function" ? after(false, false, false) : void 0;
        };
      })(this));
    };

    return Status;

  })();

  if (this.Status == null) {
    this.Status = Status;
  }

  Filelist = (function() {
    function Filelist() {}

    Filelist.prototype.sendRequest = function(url, before, after) {
      if (typeof before === "function") {
        before();
      }
      return loader.sendrequest("get", url, {}, null, (function(_this) {
        return function(code, response) {
          var json;
          if (code === 200) {
            json = JSON.parse(response);
            console.log(json);
            return typeof after === "function" ? after(json) : void 0;
          } else {
            console.log("[ERROR] " + response);
            return typeof after === "function" ? after(false) : void 0;
          }
        };
      })(this), (function(_this) {
        return function(error, response) {
          console.log("[ERROR] " + response);
          return typeof after === "function" ? after(false) : void 0;
        };
      })(this));
    };

    Filelist.prototype.breadcrumbs = function(directory, before, after) {
      return this.sendRequest("/api/v1/breadcrumbs?path=" + directory, before, after);
    };

    Filelist.prototype.files = function(directory, before, after) {
      return this.sendRequest("/api/v1/list?path=" + directory, before, after);
    };

    return Filelist;

  })();

  if (this.Filelist == null) {
    this.Filelist = Filelist;
  }

}).call(this);
