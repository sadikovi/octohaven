// Generated by CoffeeScript 1.9.0
(function() {
  var jobCanvas, jobSetting, map, reloadStatus, serverStatus, setStatus;

  serverStatus = document.getElementById("octohaven-spark-server-status");

  if (!serverStatus) {
    throw new Error("Server entries are unrecognized");
  }

  jobCanvas = document.getElementById("octohaven-job-settings");

  if (!jobCanvas) {
    throw new Error("Job settings canvas is undefined");
  }

  setStatus = function(status) {
    serverStatus.className = "";
    if (status === false) {
      serverStatus.innerHTML = "" + this.Status.STATUS_PENDING;
      return this.util.addClass(serverStatus, "text-mute");
    } else if (status === 0) {
      this.util.addClass(serverStatus, "text-green");
      return serverStatus.innerHTML = "" + this.Status.STATUS_READY;
    } else if (status === -1) {
      this.util.addClass(serverStatus, "text-yellow");
      return serverStatus.innerHTML = "" + this.Status.STATUS_BUSY;
    } else {
      this.util.addClass(serverStatus, "text-red");
      return serverStatus.innerHTML = "" + this.Status.STATUS_UNREACHABLE;
    }
  };

  reloadStatus = function() {
    var after, before, status;
    status = new this.Status;
    before = function() {
      return setStatus(false);
    };
    after = function(status, uiAddress, masterAddress) {
      return setStatus(status);
    };
    return status.requestStatus(before, after);
  };

  if (typeof reloadStatus === "function") {
    reloadStatus();
  }

  jobSetting = function(name, desc, value, canChange, onValueChanged) {
    var block, body, changer, header, span, trigger;
    if (canChange == null) {
      canChange = true;
    }
    span = {
      type: "span",
      cls: "text-mute tooltipped tooltipped-n",
      title: "" + name
    };
    span = this.mapper.parseMapForParent(span);
    span.setAttribute("aria-label", "" + desc);
    header = {
      type: "div",
      cls: "one-fifth column",
      children: span
    };
    body = {
      type: "div",
      cls: "three-fifths column text-mono",
      title: "" + value
    };
    body = this.mapper.parseMapForParent(body);
    body.setAttribute("data-attr", "fast-editor-texter");
    trigger = this.mapper.parseMapForParent({
      type: "a",
      href: "#",
      title: "Change"
    });
    trigger.setAttribute("data-attr", "fast-editor-trigger");
    changer = canChange ? {
      type: "div",
      cls: "one-fifth column",
      children: trigger
    } : null;
    changer = this.mapper.parseMapForParent(changer);
    block = {
      type: "div",
      cls: "segment",
      children: {
        type: "div",
        cls: "columns",
        children: [header, body, changer]
      }
    };
    block = this.mapper.parseMapForParent(block);
    block.setAttribute("data-attr", "fast-editor");
    if (canChange) {
      new this.FastEditor(block, function(status, value) {
        return typeof onValueChanged === "function" ? onValueChanged(status, value) : void 0;
      });
    }
    return block;
  };

  map = {
    type: "div",
    cls: "segments",
    children: [jobSetting("Job name", "Friendly job name", this.namer.generate(), true), jobSetting("Spark URL", "Spark Master URL", "spark://test-url:7077", false), jobSetting("Main class", "Main class as entrypoint for the job.", "com.test.Main", true), jobSetting("Driver memory", "Memory for operations in a driver programme", "8g", true), jobSetting("Executor memory", "Amount of memory for Spark executors", "8g", true), jobSetting("Options", "Additional settings, e.g. JVM, networking, shuffle...", "#", true)]
  };

  this.mapper.parseMapForParent(map, jobCanvas);

}).call(this);
