// Generated by CoffeeScript 1.9.0
(function() {
  var columnControl, columnName, columnStats, row, timetablesElem, update, _mapper, _misc, _timetableLoader, _util;

  timetablesElem = document.getElementById("octohaven-timetables");

  if (!timetablesElem) {
    throw new Error("Timetable placeholder is not found");
  }

  _mapper = this.mapper;

  _util = this.util;

  _misc = this.misc;

  _timetableLoader = new this.TimetableLoader;

  columnName = function(name, uid, isactive) {
    var breadcrumb, col, head, status, statusKlass, statusMsg;
    statusMsg = isactive ? "[ Active ]" : "[ Canceled ]";
    statusKlass = isactive ? "text-green" : "text-red";
    status = {
      type: "span",
      cls: "" + statusKlass,
      title: "" + statusMsg
    };
    head = {
      type: "a",
      href: "/timetable?id=" + uid + "&mode=show",
      title: "" + name
    };
    breadcrumb = {
      type: "div",
      cls: "breadcrumb",
      children: [_misc.section(status), _misc.section(head)]
    };
    col = {
      type: "div",
      cls: "two-fifths column",
      children: breadcrumb
    };
    return _mapper.parseMapForParent(col);
  };

  columnStats = function(run, lost, total) {
    var breadcrumb, col;
    run = [
      {
        type: "span",
        title: "" + run
      }, {
        type: "span",
        cls: "text-mute",
        title: " run"
      }
    ];
    lost = [
      {
        type: "span",
        title: "" + lost
      }, {
        type: "span",
        cls: "text-mute",
        title: " lost"
      }
    ];
    total = [
      {
        type: "span",
        title: "" + total
      }, {
        type: "span",
        cls: "text-mute",
        title: " total"
      }
    ];
    breadcrumb = {
      type: "div",
      cls: "breadcrumb",
      children: [_misc.section(run), _misc.section(lost), _misc.section(total)]
    };
    col = {
      type: "div",
      cls: "two-fifths column",
      children: breadcrumb
    };
    return _mapper.parseMapForParent(col);
  };

  columnControl = function(uid, isactive, func) {
    var btn, col;
    btn = isactive ? {
      type: "div",
      cls: "btn btn-compact",
      title: "Cancel",
      onclick: function(e) {
        return typeof func === "function" ? func(this) : void 0;
      }
    } : null;
    btn = _mapper.parseMapForParent(btn);
    btn.uid = uid;
    col = {
      type: "div",
      cls: "one-fifth column",
      children: btn
    };
    return _mapper.parseMapForParent(col);
  };

  row = function(obj) {
    var colControl, colName, colStats, isactive, lost, name, run, total, uid;
    name = obj["name"];
    uid = obj["uid"];
    run = _util.intOrElse(obj["numjobs"], -1);
    total = _util.intOrElse(obj["numtotaljobs"], -1);
    lost = total - run;
    isactive = !obj["canceled"];
    colName = columnName(name, uid, isactive);
    colStats = columnStats(run, lost, total);
    colControl = columnControl(uid, isactive, function(obj) {
      var fetch, update;
      fetch = (function(_this) {
        return function() {
          _util.addClass(obj, "btn-disabled");
          return obj.innerHTML = "???";
        };
      })(this);
      update = (function(_this) {
        return function(ok) {
          _util.addClass(obj, "btn-disabled");
          return obj.innerHTML = ok ? "Canceled" : "Error";
        };
      })(this);
      return _timetableLoader.cancel(obj.uid, (function() {
        return fetch();
      }), (function(ok, json) {
        return update(ok);
      }));
    });
    return _misc.segment(_misc.columns([colName, colStats, colControl]));
  };

  update = function() {
    return _timetableLoader.list(false, function() {
      return timetablesElem.innerHTML = "";
    }, function(ok, json) {
      var msg, result, rows, timetable, timetables, view;
      if (ok) {
        timetables = json["content"]["timetables"];
        if (timetables && timetables.length > 0) {
          rows = [
            (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = timetables.length; _i < _len; _i++) {
                timetable = timetables[_i];
                _results.push(row(timetable));
              }
              return _results;
            })()
          ];
          return _misc.segments(rows, timetablesElem);
        } else {
          view = _misc.blankslateWithMsg("No timetables found :(", "You can still create a timetable for any job from job view");
          return _mapper.parseMapForParent(view, timetablesElem);
        }
      } else {
        msg = json ? json["content"]["msg"] : "We know and keep working on that";
        result = _misc.blankslateWithMsg("Something went wrong :(", msg);
        return _mapper.parseMapForParent(result, timetablesElem);
      }
    });
  };

  if (typeof update === "function") {
    update();
  }

}).call(this);
