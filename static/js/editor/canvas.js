// Generated by CoffeeScript 1.9.0
(function() {
  var Base, Canvas, Control, mapper, util,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  util = this.util;

  mapper = this.mapper;

  Base = (function() {
    function Base(_at_body, _at_controls) {
      this.body = _at_body;
      this.controls = _at_controls;
      this.id = util.randomid();
    }

    return Base;

  })();

  Canvas = (function(_super) {
    __extends(Canvas, _super);

    function Canvas(_at_parent) {
      var body, controls;
      this.parent = _at_parent;
      if (!(this.parent && this.parent.nodeType === Node.ELEMENT_NODE)) {
        throw new Error("Canvas parent should be ELEMENT_NODE");
      }
      body = this._body(this.parent);
      this.divider = this._divider(this.parent);
      controls = this._controls(this.parent);
      this.controlslist = {};
      this.root = null;
      Canvas.__super__.constructor.call(this, body, controls);
    }

    Canvas.prototype._body = function(parent) {
      var map;
      map = {
        type: "div",
        id: "octohaven-canvas-body",
        cls: "container"
      };
      return mapper.parseMapForParent(map, parent);
    };

    Canvas.prototype._controls = function(parent) {
      var container, map;
      container = {
        type: "div",
        id: "octohaven-canvas-actions",
        cls: "container"
      };
      container = mapper.parseMapForParent(container, parent);
      map = {
        type: "div",
        cls: "breadcrumb"
      };
      return mapper.parseMapForParent(map, container);
    };

    Canvas.prototype._divider = function(parent) {
      var map;
      map = {
        type: "div",
        cls: "divider"
      };
      return mapper.parseMapForParent(map, parent);
    };

    Canvas.prototype.addControl = function(control) {
      this.controlslist[control.id] = control;
      this.controls.appendChild(control.body);
      return mapper.parseMapForParent({
        type: "div",
        cls: "divider"
      }, this.controls);
    };

    return Canvas;

  })(Base);

  Control = (function(_super) {
    __extends(Control, _super);

    function Control(_at_name, _at_action) {
      var body;
      this.name = _at_name;
      this.action = _at_action;
      body = this._body();
      util.addEventListener(body, "click", (function(_this) {
        return function(e) {
          return _this.action(_this);
        };
      })(this));
      Control.__super__.constructor.call(this, body);
    }

    Control.prototype._body = function(parent) {
      var map;
      map = {
        type: "div",
        cls: "btn",
        title: "" + this.name
      };
      return mapper.parseMapForParent(map, parent);
    };

    return Control;

  })(Base);

  if (this.Canvas == null) {
    this.Canvas = Canvas;
  }

  if (this.Control == null) {
    this.Control = Control;
  }

}).call(this);
