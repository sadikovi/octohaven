// Generated by CoffeeScript 1.9.0
(function() {
  var column, headerElem, id, intervalEntry, intervalMenu, keyElem, keyValue, mode, params, timetableCreateElem, timetableCreateParamsElem, timetableIntervalsElem, timetableShowElem, view, _jobLoader, _mapper, _misc, _timetableLoader, _util;

  headerElem = document.getElementById("octohaven-timetable-header");

  timetableShowElem = document.getElementById("octohaven-timetable-show");

  timetableCreateElem = document.getElementById("octohaven-timetable-create");

  timetableIntervalsElem = document.getElementById("octohaven-timetable-create-intervals");

  timetableCreateParamsElem = document.getElementById("octohaven-timetable-create-params");

  if (!(headerElem && timetableShowElem && timetableCreateElem && timetableIntervalsElem)) {
    throw new Error("Timetable placeholders are not found");
  }

  _mapper = this.mapper;

  _util = this.util;

  _misc = this.misc;

  _timetableLoader = new this.TimetableLoader;

  _jobLoader = new this.JobLoader;

  params = _util.windowParameters();

  mode = params != null ? params.mode : void 0;

  id = params != null ? params.id : void 0;

  if (!(mode === "show" || mode === "create")) {
    _util.removeClass(timetableShowElem, "hidden");
    view = _misc.blankslateWithMsg("Something went wrong :(", "Unrecognized mode");
    _mapper.parseMapForParent(view, timetableShowElem);
    return;
  }

  if (id === null) {
    _util.removeClass(timetableShowElem, "hidden");
    view = _misc.blankslateWithMsg("Something went wrong :(", "Undefined id");
    _mapper.parseMapForParent(view, timetableShowElem);
    return;
  }

  if (mode === "show") {
    headerElem.innerHTML = "View timetable";
  } else if (mode === "create") {
    headerElem.innerHTML = "Create new timetable";
  } else {
    headerElem.innerHTML = "";
  }

  column = function(width, content, parent) {
    var col;
    if (parent == null) {
      parent = null;
    }
    col = {
      type: "div",
      cls: width + " column",
      children: content
    };
    return _mapper.parseMapForParent(col, parent);
  };

  keyElem = function(key, desc, elem) {
    var keyElement, list;
    keyElement = _mapper.parseMapForParent({
      type: "span",
      cls: "text-mute tooltipped tooltipped-n",
      title: "" + key
    });
    keyElement.setAttribute("aria-label", "" + desc);
    list = [
      column("one-fourth", keyElement), column("three-fourths", {
        type: "span",
        children: elem
      })
    ];
    return _misc.segment(_misc.columns(list));
  };

  keyValue = function(key, desc, value) {
    return keyElem(key, desc, {
      type: "span",
      title: "" + value
    });
  };

  intervalEntry = function(name, interval, parent) {
    var elem, elemMap;
    elemMap = {
      type: "a",
      cls: "menu-item",
      title: "" + name,
      href: ""
    };
    elem = _mapper.parseMapForParent(elemMap, parent);
    elem.interval = interval;
    return elem;
  };

  intervalMenu = function() {
    var delays, menu;
    menu = _mapper.parseMapForParent({
      type: "nav",
      cls: "menu"
    });
    delays = {
      600: intervalEntry("Every 10 minutes", 10 * 60, menu),
      3600: intervalEntry("Every 1 hour", 1 * 60 * 60, menu),
      10800: intervalEntry("Every 3 hours", 3 * 60 * 60, menu),
      86400: intervalEntry("Every day", 24 * 60 * 60, menu),
      259200: intervalEntry("Every 3 days", 3 * 24 * 60 * 60, menu)
    };
    return menu;
  };

  if (mode === "show") {
    _timetableLoader.get(id, function() {
      timetableShowElem.innerHTML = "";
      _util.removeClass(timetableShowElem, "hidden");
      _util.addClass(timetableCreateParamsElem, "hidden");
      _util.addClass(timetableCreateElem, "hidden");
      return _util.addClass(timetableIntervalsElem, "hidden");
    }, function(ok, json) {
      var job, jobid, jobname, msg, result, rows, timetable;
      result = null;
      if (ok) {
        timetable = json["content"]["timetable"];
        job = json["content"]["job"];
        jobid = job["uid"];
        jobname = job["sparkjob"]["name"];
        rows = [
          keyValue("Name", "Timetable name", timetable["name"]), keyValue("Status", "Whether jobs keep running under this schedule", timetable["canceled"] ? "CANCELED" : "ACTIVE"), keyElem("Clone job", "Job that is used to create jobs for timetable", {
            type: "a",
            href: "/job?jobid=" + jobid,
            title: "" + jobname
          }), keyValue("Start time", "Start time for timetable", _util.timestampToDate(timetable["starttime"])), keyValue("Number of jobs run", "Number of actual jobs having run", timetable["numjobs"]), keyValue("Total number of jobs", "Estimated total number of jobs", timetable["numtotaljobs"]), keyValue("Intervals in sec", "Actual schedule for timetable", timetable["intervals"])
        ];
        result = _misc.segments(rows);
      } else {
        msg = json ? json["content"]["msg"] : "We know and keep working on that";
        result = _misc.blankslateWithMsg("Something went wrong :(", msg);
      }
      return _mapper.parseMapForParent(result, timetableShowElem);
    });
  } else if (mode === "create") {
    _jobLoader.getJob(id, function() {
      timetableCreateElem.innerHTML = "";
      _util.removeClass(timetableCreateParamsElem, "hidden");
      _util.removeClass(timetableCreateElem, "hidden");
      _util.removeClass(timetableIntervalsElem, "hidden");
      return _util.addClass(timetableShowElem, "hidden");
    }, function(ok, json) {
      var job, jobid, jobname, msg, result, rows;
      result = null;
      if (ok) {
        job = json["content"]["job"];
        jobid = job["uid"];
        jobname = job["sparkjob"]["name"];
        params = [
          keyElem("Base job for the timetable", "Job that is used to create jobs for timetable", {
            type: "a",
            href: "/job?jobid=" + jobid,
            title: "" + jobname
          })
        ];
        rows = [
          _misc.jobOption("Name", "Timetable name", "dummy", function(status, value) {
            return console.log(status, value);
          })
        ];
        result = _misc.segments(rows);
        _mapper.parseMapForParent(params, timetableCreateParamsElem);
        _mapper.parseMapForParent({
          type: "h4",
          title: "Choose interval"
        }, timetableIntervalsElem);
        _mapper.parseMapForParent(intervalMenu(), timetableIntervalsElem);
      } else {
        msg = json ? json["content"]["msg"] : "We know and keep working on that";
        result = _misc.blankslateWithMsg("Something went wrong :(", msg);
      }
      return _mapper.parseMapForParent(result, timetableCreateElem);
    });
  }

}).call(this);
