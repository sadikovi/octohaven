// Generated by CoffeeScript 1.9.0
(function() {
  var actions, cancelbtn, changeState, checkvalue, createbtn, dd, dt, first, generate, generatelink, iddl, idinput, idmsg, map, msg, namedl, nameinput, newProjectForm, note, randomlink, second;

  newProjectForm = document.getElementById("new-project-form");

  if (!newProjectForm) {
    throw new Error("Form is undefined");
  }

  createbtn = {
    type: "button",
    cls: "btn btn-success",
    title: "Create"
  };

  createbtn = this.mapper.parseMapForParent(createbtn);

  cancelbtn = {
    type: "button",
    cls: "btn",
    title: "Cancel"
  };

  cancelbtn = this.mapper.parseMapForParent(cancelbtn);

  idinput = {
    type: "input",
    inputtype: "text",
    cls: "input-block input-contrast",
    placeholder: "Project id"
  };

  idinput = this.mapper.parseMapForParent(idinput);

  idmsg = {
    type: "p",
    cls: "note"
  };

  idmsg = this.mapper.parseMapForParent(idmsg);

  iddl = {
    type: "dl",
    cls: "form required",
    children: [
      dt = {
        type: "dt",
        children: {
          type: "label",
          title: "Project id"
        }
      }, dd = {
        type: "dd",
        children: [idinput]
      }, msg = {
        type: "div",
        children: [idmsg]
      }
    ]
  };

  iddl = this.mapper.parseMapForParent(iddl);

  nameinput = {
    type: "input",
    cls: "input-block input-contrast",
    inputtype: "text",
    placeholder: "Project name"
  };

  nameinput = this.mapper.parseMapForParent(nameinput);

  namedl = {
    type: "dl",
    cls: "form",
    children: [
      dt = {
        type: "dt",
        children: {
          type: "label",
          title: "Project name / description"
        }
      }, dd = {
        type: "dd",
        children: [nameinput]
      }
    ]
  };

  namedl = this.mapper.parseMapForParent(namedl);

  generate = function() {
    var adjs, nouns, rnd;
    adjs = ["autumn", "hidden", "bitter", "misty", "silent", "empty", "dry", "dark", "summer", "icy", "delicate", "quiet", "white", "cool", "spring", "winter", "patient", "twilight", "dawn", "crimson", "wispy", "weathered", "blue", "billowing", "broken", "cold", "damp", "falling", "frosty", "green", "long", "late", "lingering", "bold", "little", "morning", "muddy", "old", "red", "rough", "still", "small", "sparkling", "throbbing", "shy", "wandering", "withered", "wild", "black", "young", "holy", "solitary", "fragrant", "aged", "snowy", "proud", "floral", "restless", "divine", "polished", "ancient", "purple", "lively", "nameless"];
    nouns = ["waterfall", "river", "breeze", "moon", "rain", "wind", "sea", "morning", "snow", "lake", "sunset", "pine", "shadow", "leaf", "dawn", "glitter", "forest", "hill", "cloud", "meadow", "sun", "glade", "bird", "brook", "butterfly", "bush", "dew", "dust", "field", "fire", "flower", "firefly", "feather", "grass", "haze", "mountain", "night", "pond", "darkness", "snowflake", "silence", "sound", "sky", "shape", "surf", "thunder", "violet", "water", "wildflower", "wave", "water", "resonance", "sun", "wood", "dream", "cherry", "tree", "fog", "frost", "voice", "paper", "frog", "smoke", "star"];
    rnd = Math.floor(Math.random() * Math.pow(2, 12));
    return adjs[rnd >> 6 % 64] + "-" + nouns[rnd % 64];
  };

  randomlink = {
    type: "a",
    href: "",
    title: "" + (generate()),
    onclick: (function(_this) {
      return function(e) {
        idinput.value = randomlink.innerHTML;
        checkvalue(iddl, idinput, idmsg);
        e.stopPropagation();
        return e.preventDefault();
      };
    })(this)
  };

  randomlink = this.mapper.parseMapForParent(randomlink);

  generatelink = {
    type: "a",
    href: "",
    title: "another one",
    onclick: (function(_this) {
      return function(e) {
        randomlink.innerHTML = generate();
        e.stopPropagation();
        return e.preventDefault();
      };
    })(this)
  };

  generatelink = this.mapper.parseMapForParent(generatelink);

  map = [
    iddl, note = {
      type: "dl",
      cls: "form-note",
      children: {
        type: "p",
        cls: "note",
        children: [
          first = {
            type: "span",
            title: "Don't know what unique name to pick? Try "
          }, randomlink, second = {
            type: "span",
            title: " or get "
          }, generatelink
        ]
      }
    }, namedl, actions = {
      type: "dl",
      cls: "form",
      children: {
        type: "dl",
        cls: "form-actions",
        children: [createbtn, cancelbtn]
      }
    }
  ];

  this.mapper.parseMapForParent(map, newProjectForm);

  changeState = function(dl, input, p, status, msg) {
    var error, errored, errorlbl, success, successful, successlbl, _ref, _ref1;
    _ref = ["success", "successful", "text-green"], success = _ref[0], successful = _ref[1], successlbl = _ref[2];
    _ref1 = ["error", "errored", "text-red"], error = _ref1[0], errored = _ref1[1], errorlbl = _ref1[2];
    this.util.removeClass(dl, errored, successful);
    this.util.removeClass(input, error, success);
    if (p) {
      this.util.removeClass(p, errorlbl, successlbl);
    }
    if (p) {
      p.innerHTML = "";
    }
    if (status === "success") {
      this.util.addClass(dl, successful);
      this.util.addClass(input, success);
      if (p && msg) {
        this.util.addClass(p, successlbl);
        return p.innerHTML = "" + msg;
      }
    } else if (status === "error") {
      this.util.addClass(dl, errored);
      this.util.addClass(input, error);
      if (p && msg) {
        this.util.addClass(p, errorlbl);
        return p.innerHTML = "" + msg;
      }
    }
  };

  checkvalue = function(dl, input, p) {
    var result, value;
    value = input.value;
    changeState(dl, input, p, "reset");
    if (!value) {
      return false;
    }
    result = value.length > 3 && /^[\w-]+$/i.test(value);
    if (result) {
      return changeState(dl, input, p, "success", "All good");
    } else {
      return changeState(dl, input, p, "error", "Some error");
    }
  };

  this.util.addEventListener(idinput, "keyup", (function(_this) {
    return function(e) {
      return checkvalue(iddl, idinput, idmsg);
    };
  })(this));

  this.util.addEventListener(idinput, "onchange", (function(_this) {
    return function(e) {
      return checkvalue(iddl, idinput, idmsg);
    };
  })(this));

  this.util.addEventListener(idinput, "onpaste", (function(_this) {
    return function(e) {
      return checkvalue(iddl, idinput, idmsg);
    };
  })(this));

}).call(this);
