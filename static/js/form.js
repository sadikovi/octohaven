// Generated by CoffeeScript 1.9.0
(function() {
  var Form;

  Form = (function() {
    function Form(_at_form, _at_onsubmit, _at_oncancel) {
      var _ref;
      this.form = _at_form;
      this.onsubmit = _at_onsubmit;
      this.oncancel = _at_oncancel;
      if (!(this.form && this.hasDataAttribute(this.form, "form"))) {
        throw new Error("Element is not a form");
      }
      this.assets = {};
      _ref = [[], null, null], this.assets.controls = _ref[0], this.assets.submit = _ref[1], this.assets.cancel = _ref[2];
      this.discoverPartial(this.form);
      this.ready = true;
      if (this.assets.submit && this.onsubmit) {
        Form._util.addEventListener(this.assets.submit, "click", (function(_this) {
          return function(e) {
            e.preventDefault();
            e.stopPropagation();
            return _this.onsubmit(_this.data());
          };
        })(this));
      }
      if (this.assets.cancel && this.oncancel) {
        Form._util.addEventListener(this.assets.cancel, "click", (function(_this) {
          return function(e) {
            e.preventDefault();
            e.stopPropagation();
            return _this.oncancel();
          };
        })(this));
      }
    }

    Form.prototype.hasDataAttribute = function(elem, value) {
      return elem.hasAttribute("data-attr") && elem.getAttribute("data-attr") === value;
    };

    Form.prototype.hasNameAttribute = function(elem) {
      return elem.hasAttribute("data-name-attr");
    };

    Form.prototype.getNameAttribute = function(elem) {
      return elem.getAttribute("data-name-attr");
    };

    Form.prototype.getControlForNameAttr = function(name) {
      var el, _i, _len, _ref;
      _ref = this.assets.controls;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        if (this.getNameAttribute(el) === name) {
          return el;
        }
      }
    };

    Form.prototype.discoverPartial = function(node) {
      var elem, _i, _len, _ref, _results;
      if (!(this.assets && node && node.childNodes)) {
        return false;
      }
      _ref = node.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elem = _ref[_i];
        if (elem && elem.nodeType === Node.ELEMENT_NODE) {
          if (this.hasDataAttribute(elem, "control") && this.hasNameAttribute(elem)) {
            _results.push(this.assets.controls.push(elem));
          } else if (!this.assets.submit && this.hasDataAttribute(elem, "submit")) {
            _results.push(this.assets.submit = elem);
          } else if (!this.assets.cancel && this.hasDataAttribute(elem, "cancel")) {
            _results.push(this.assets.cancel = elem);
          } else {
            _results.push(this.discoverPartial(elem, this.assets));
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Form.prototype.lock = function() {
      var elem, _i, _len, _ref, _results;
      if (this.assets.submit) {
        this.assets.submit.setAttribute("disabled", "");
        Form._util.addClass(this.assets.submit, "btn-disabled");
      }
      if (this.assets.cancel) {
        this.assets.cancel.setAttribute("disabled", "");
        Form._util.addClass(this.assets.cancel, "btn-disabled");
      }
      if (this.assets.controls && this.assets.controls.length) {
        _ref = this.assets.controls;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          elem = _ref[_i];
          _results.push(elem.setAttribute("disabled", ""));
        }
        return _results;
      }
    };

    Form.prototype.unlock = function() {
      var elem, _i, _len, _ref, _results;
      if (this.assets.submit) {
        this.assets.submit.removeAttribute("disabled");
        Form._util.removeClass(this.assets.submit, "btn-disabled");
      }
      if (this.assets.cancel) {
        this.assets.cancel.removeAttribute("disabled", "");
        Form._util.removeClass(this.assets.cancel, "btn-disabled");
      }
      if (this.assets.controls) {
        _ref = this.assets.controls;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          elem = _ref[_i];
          _results.push(elem.removeAttribute("disabled", ""));
        }
        return _results;
      }
    };

    Form.prototype.startLoading = function() {
      if (!this.ready) {
        return false;
      }
      this.ready = false;
      this.lock();
      return Form._util.addClass(this.form, "loading");
    };

    Form.prototype.stopLoading = function() {
      if (this.ready) {
        return false;
      }
      this.unlock();
      Form._util.removeClass(this.form, "loading");
      return this.ready = true;
    };

    Form.prototype.data = function() {
      var elem, info, _i, _len, _ref;
      info = {};
      _ref = this.assets.controls;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elem = _ref[_i];
        info["" + (this.getNameAttribute(elem))] = elem.value;
      }
      return info;
    };

    Form.prototype.createMessage = function(type, header, message) {
      var headerElem, mainElem, paragElem;
      mainElem = document.createElement("div");
      Form._util.addClass(mainElem, "ui", "" + type, "message");
      headerElem = document.createElement("div");
      Form._util.addClass(headerElem, "header");
      headerElem.innerHTML = "" + header;
      paragElem = document.createElement("p");
      paragElem.innerHTML = "" + message;
      mainElem.appendChild(headerElem);
      mainElem.appendChild(paragElem);
      return mainElem;
    };

    Form.prototype.destroyMessage = function() {
      if (this.message) {
        this.message.remove();
        return this.message = null;
      }
    };

    Form.prototype.appendMessage = function() {
      if (!(this.form && this.message)) {
        return false;
      }
      if (this.form.firstChild) {
        return this.form.insertBefore(this.message, this.form.firstChild);
      } else {
        return this.form.appendChild(this.message);
      }
    };

    Form.prototype.showErrorMessage = function(msg) {
      this.destroyMessage();
      this.message = this.createMessage("error", "KO", msg);
      return this.appendMessage();
    };

    Form.prototype.showSuccessMessage = function(msg) {
      this.destroyMessage();
      this.message = this.createMessage("success", "OK", msg);
      return this.appendMessage();
    };

    return Form;

  })();

  Form._util = this.util;

  if (this.Form == null) {
    this.Form = Form;
  }

}).call(this);
