// Generated by CoffeeScript 1.9.0
(function() {
  var CurrentJob, JOB_CREATE, JOB_ERROR, JOB_SUBMIT, JOB_SUCCESS, breadcrumbs, breadcrumbsElem, currentJob, filelist, files, filesElem, jobCanvas, jobSettingElem, selectJar, selectedJarElem, settings, statuses, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  jobCanvas = document.getElementById("octohaven-job-settings");

  if (!jobCanvas) {
    throw new Error("Job settings canvas is undefined");
  }

  breadcrumbsElem = document.getElementById("octohaven-filelist-breadcrumbs");

  filesElem = document.getElementById("octohaven-filelist-files");

  selectedJarElem = document.getElementById("octohaven-selected-jar");

  if (!(breadcrumbsElem && filesElem && selectedJarElem)) {
    throw new Error("Cannot build file list");
  }

  filelist = new this.Filelist;

  _ref = ["CREATE", "SUBMIT", "SUCCESS", "ERROR"], JOB_CREATE = _ref[0], JOB_SUBMIT = _ref[1], JOB_SUCCESS = _ref[2], JOB_ERROR = _ref[3];

  statuses = [JOB_CREATE, JOB_SUBMIT, JOB_SUCCESS, JOB_ERROR];

  CurrentJob = (function() {
    function CurrentJob(name, mainClass, driverMemory, executorMemory, options) {
      this.settings = {};
      this.settings["name"] = "" + name;
      this.settings["mainClass"] = "" + mainClass;
      this.settings["driverMemory"] = "" + driverMemory;
      this.settings["executorMemory"] = "" + executorMemory;
      this.settings["options"] = "" + options;
      this.jar = {
        elem: null,
        path: ""
      };
      this.status = JOB_CREATE;
    }

    CurrentJob.prototype.setStatus = function(status) {
      if (__indexOf.call(statuses, status) < 0) {
        throw new Error("Invalid status " + status);
      }
      return this.status = status;
    };

    CurrentJob.prototype.setJar = function(elem, path) {
      this.jar.elem = elem;
      return this.jar.path = path;
    };

    CurrentJob.prototype.isJarSet = function() {
      return this.jar.elem != null;
    };

    CurrentJob.prototype.getJarElem = function() {
      return this.jar.elem;
    };

    CurrentJob.prototype.getJarPath = function() {
      return this.jar.path;
    };

    CurrentJob.prototype.setOption = function(key, value) {
      if (!(key in this.settings)) {
        throw new Error("Option is not found");
      }
      return this.settings[key] = value;
    };

    CurrentJob.prototype.getOption = function(key) {
      if (key in this.settings) {
        return this.settings[key];
      } else {
        return null;
      }
    };

    return CurrentJob;

  })();

  currentJob = new CurrentJob(this.namer.generate(), "org.test.Main", "8g", "8g", "#");

  jobSettingElem = function(name, desc, value, canChange, onValueChanged) {
    var block, body, changer, header, span, trigger;
    if (canChange == null) {
      canChange = true;
    }
    span = this.mapper.parseMapForParent({
      type: "span",
      cls: "text-mute tooltipped tooltipped-n",
      title: "" + name
    });
    span.setAttribute("aria-label", "" + desc);
    header = {
      type: "div",
      cls: "one-fifth column",
      children: span
    };
    body = this.mapper.parseMapForParent({
      type: "div",
      cls: "three-fifths column",
      title: "" + value
    });
    body.setAttribute("data-attr", "fast-editor-texter");
    trigger = this.mapper.parseMapForParent({
      type: "a",
      href: "#",
      title: "Change"
    });
    trigger.setAttribute("data-attr", "fast-editor-trigger");
    changer = this.mapper.parseMapForParent(canChange ? {
      type: "div",
      cls: "one-fifth column",
      children: trigger
    } : null);
    block = this.mapper.parseMapForParent({
      type: "div",
      cls: "segment",
      children: {
        type: "div",
        cls: "columns",
        children: [header, body, changer]
      }
    });
    block.setAttribute("data-attr", "fast-editor");
    if (canChange) {
      new this.FastEditor(block, function(status, value) {
        return typeof onValueChanged === "function" ? onValueChanged(status, value) : void 0;
      });
    }
    return block;
  };

  settings = {
    type: "div",
    cls: "segments",
    children: [
      jobSettingElem("Job name", "Friendly job name", currentJob.getOption("name"), true, function(ok, value) {
        if (ok) {
          return currentJob.setOption("name", value);
        }
      }), jobSettingElem("Main class", "Main class as entrypoint for the job.", currentJob.getOption("mainClass"), true, function(ok, value) {
        if (ok) {
          return currentJob.setOption("mainClass", value);
        }
      }), jobSettingElem("Driver memory", "Memory for operations in a driver programme", currentJob.getOption("driverMemory"), true, function(ok, value) {
        if (ok) {
          return currentJob.setOption("driverMemory", value);
        }
      }), jobSettingElem("Executor memory", "Amount of memory for Spark executors", currentJob.getOption("executorMemory"), true, function(ok, value) {
        if (ok) {
          return currentJob.setOption("executorMemory", value);
        }
      }), jobSettingElem("Options", "Additional settings, e.g. JVM, networking, shuffle...", currentJob.getOption("options"), true, function(ok, value) {
        if (ok) {
          return currentJob.setOption("options", value);
        }
      })
    ]
  };

  this.mapper.parseMapForParent(settings, jobCanvas);

  breadcrumbs = function(dir) {
    return filelist.breadcrumbs(dir, function() {
      return breadcrumbsElem.innerHTML = "";
    }, (function(_this) {
      return function(json) {
        var arr, elem, i, ls, obj, _i, _len, _ref1;
        if (!json) {
          return false;
        }
        _ref1 = [[], json["content"]["breadcrumbs"]], arr = _ref1[0], ls = _ref1[1];
        for (i = _i = 0, _len = ls.length; _i < _len; i = ++_i) {
          obj = ls[i];
          if (i < ls.length - 1) {
            elem = {
              type: "a",
              cls: "section",
              title: "" + obj["name"],
              onclick: function(e) {
                breadcrumbs(this.path);
                return files(this.path);
              }
            };
            elem = _this.mapper.parseMapForParent(elem);
            elem.path = obj["path"];
            arr.push(elem);
            arr.push({
              type: "div",
              cls: "separator",
              title: "/"
            });
            elem = null;
          } else {
            arr.push({
              type: "div",
              cls: "active section",
              title: "" + obj["name"]
            });
          }
        }
        return _this.mapper.parseMapForParent(arr, breadcrumbsElem);
      };
    })(this));
  };

  selectJar = function(elem, path) {
    if (currentJob.isJarSet()) {
      this.util.removeClass(currentJob.getJarElem(), "selected");
      selectedJarElem.innerHTML = "";
    }
    currentJob.setJar(elem, path);
    this.util.addClass(elem, "selected");
    return selectedJarElem.innerHTML = path;
  };

  files = function(dir) {
    return filelist.files(dir, function() {
      return filesElem.innerHTML = "";
    }, (function(_this) {
      return function(json) {
        var arr, elem, ls, obj, _i, _len, _ref1;
        if (!json) {
          return false;
        }
        _ref1 = [[], json["content"]["list"]], arr = _ref1[0], ls = _ref1[1];
        for (_i = 0, _len = ls.length; _i < _len; _i++) {
          obj = ls[_i];
          elem = null;
          if (obj["tp"] === "DIR") {
            elem = {
              type: "a",
              cls: "menu-item",
              href: "",
              title: "[dir] " + obj["name"],
              onclick: function(e) {
                breadcrumbs(this.obj["path"]);
                files(this.obj["path"]);
                e.preventDefault();
                return e.stopPropagation();
              }
            };
          } else {
            elem = {
              type: "a",
              cls: "menu-item",
              href: "",
              title: "[jar] " + obj["name"],
              onclick: function(e) {
                selectJar(this, this.obj["path"]);
                e.preventDefault();
                return e.stopPropagation();
              }
            };
          }
          elem = _this.mapper.parseMapForParent(elem);
          elem.obj = obj;
          if (currentJob.getJarPath() === elem.obj["path"]) {
            selectJar(elem, elem.obj["path"]);
          }
          arr.push(elem);
        }
        return _this.mapper.parseMapForParent(arr, filesElem);
      };
    })(this));
  };

  breadcrumbs("");

  files("");

}).call(this);
